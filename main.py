import logging
from typing import Dict
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.base import StorageKey
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardMarkup
from aiogram.types import (
    InlineKeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    CallbackQuery
)
import random
import asyncio
import html
import os
import traceback
import time
from datetime import datetime, timedelta

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_KEY = os.getenv('ADMIN_KEY')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = BOT_TOKEN

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
if not API_TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
try:
    bot = Bot(token=API_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    logger.info("–ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    exit(1)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ChatState(StatesGroup):
    waiting_for_partner = State()
    in_chat = State()
    waiting_for_broadcast = State()


# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
active_users: Dict[int, Dict] = {}  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –æ–∂–∏–¥–∞—é—â–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
chats: Dict[int, int] = {}  # –¢–µ–∫—É—â–∏–µ —á–∞—Ç—ã: {user1_id: user2_id, user2_id: user1_id}
posts: Dict[int, str] = {}  # –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
not_post: Dict[int, str] = {}  # –ß–µ—Ä–Ω–æ–≤–∏–∫–∏ –ø–æ—Å—Ç–æ–≤ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
recently_users: Dict[int, list] = {}  # –ò—Å—Ç–æ—Ä–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
post_creation_time: Dict[int, float] = {}  # –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ (timestamp)
user_ids: Set[int] = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞


@dp.message(Command("broadcast"))
async def broadcast_command(message: Message, state: FSMContext):
    """–°–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ admin ID)
        if len(message.text.split()) < 2 or message.text.split()[1] != ADMIN_KEY:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞")
            return

        await message.answer(
            "üì¢ –†–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
            "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
        )
        await state.set_state(ChatState.waiting_for_broadcast)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ä–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ broadcast_command: {e}\n{traceback.format_exc()}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")


@dp.message(Command("cancel"), ChatState.waiting_for_broadcast)
async def cancel_broadcast(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        await state.clear()
        await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_broadcast: {e}\n{traceback.format_exc()}")


@dp.message(ChatState.waiting_for_broadcast)
async def process_broadcast_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        broadcast_text = f"üì¢ <b>–í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n\n{message.text}"

        await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")

        success_count = 0
        fail_count = 0
        total_users = len(user_ids)

        # –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for user_id in list(user_ids):
            try:
                await bot.send_message(
                    user_id,
                    broadcast_text,
                    parse_mode=ParseMode.HTML
                )
                success_count += 1
                await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å flood
            except Exception as e:
                fail_count += 1
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_text = (
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {fail_count}\n"
            f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: {success_count / total_users * 100:.1f}%"
        )

        await message.answer(report_text)
        await state.clear()

        logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success_count}, –ù–µ—É–¥–∞—á–Ω–æ: {fail_count}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_broadcast_message: {e}\n{traceback.format_exc()}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ")
        await state.clear()


@dp.message(Command("stats"))
async def stats_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        if len(message.text.split()) < 2 or message.text.split()[1] != ADMIN_KEY:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞")
            return

        stats_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)}\n"
            f"üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(chats) // 2}\n"
            f"üìù –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {len(posts)}\n"
            f"‚è∞ –ü–æ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {sum(1 for t in post_creation_time.values() if time.time() - t < 86400)}\n"
            f"üîç –í –ø–æ–∏—Å–∫–µ: {len(active_users)}"
        )

        await message.answer(stats_text, parse_mode=ParseMode.HTML)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ stats_command: {e}\n{traceback.format_exc()}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@dp.message(CommandStart(), ChatState.in_chat)
async def start_com(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –≤–æ –≤—Ä–µ–º—è —á–∞—Ç–∞"""
    try:
        user_ids.add(message.from_user.id)
        await message.answer(text="–ú–µ–Ω—é –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –¥–∏–∞–ª–æ–≥–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_com: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(CommandStart())
async def command_start(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        user_ids.add(message.from_user.id)
        welcome_text = f"""
        üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å—Ä–µ–¥–∏ –≥–µ–µ–≤.

        üîç –ù–∞–∂–º–∏ "–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç—ã", —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.
        üìÑ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ–≥–æ —Ç–µ–∫—Å—Ç –±–æ—Ç—É.
           (–£ –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã–π –ø–æ—Å—Ç)

        ‚ö†Ô∏è –ü—Ä–∞–≤–∏–ª–∞:
        1. –ó–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è –ª—é–±–∞—è —Ç—Ä–∞–≤–ª—è –∏ –≤—ã—Å–∫–∞–∑—ã–≤–∞–µ–∏–Ω—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—ã –∏/–∏–ª–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
        2. –ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –¥–ª—è –õ–ì–ë–¢ –º—É–∂—á–∏–Ω
        3. –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
        4. –ü—Ä–æ–¥–æ–ª–∂–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –≤—ã —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç.   

        üö™ –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop –∏–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É
        """
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç—ã üîç")]
            ],
            resize_keyboard=True
        )

        await message.answer(welcome_text, reply_markup=keyboard)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ command_start: {e}\n{traceback.format_exc()}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(F.text == "–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç—ã üîç")
async def start_search(message: Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    try:
        user_ids.add(message.from_user.id)
        user_id = message.from_user.id
        Board = InlineKeyboardBuilder()

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –º–µ–Ω–µ–µ 5 —á–∞—Å–æ–≤)
        current_time = time.time()
        available_posts = [
            [uid, posts[uid]] for uid in posts.keys()
            if (uid != message.from_user.id and uid not in chats.keys())
               and uid not in recently_users.get(message.from_user.id, [])
               and (current_time - post_creation_time.get(uid, 0)) < 5 * 3600  # 5 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        ]

        if len(available_posts) < 1:
            await message.answer(text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–ª—è –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            return

        show = random.choice(available_posts)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞
        time_left = 5 * 3600 - (current_time - post_creation_time.get(show[0], current_time))
        hours_left = int(time_left // 3600)
        minutes_left = int((time_left % 3600) // 60)

        time_info = f"\n\n‚è∞ –ü–æ—Å—Ç –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ {hours_left}—á {minutes_left}–º"

        Board.add(InlineKeyboardButton(text="üí¨–û–±—â–∞—Ç—å—Å—è", callback_data=f"new_chat.{show[0]}.{message.from_user.id}"))
        Board.add(InlineKeyboardButton(text="‚ö†Ô∏è–ñ–∞–ª–æ–±–∞", callback_data=f"warning.{show[0]}"))

        await message.answer(text=show[1] + time_info, reply_markup=Board.as_markup())
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –ø–æ—Å—Ç {show[0]}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_search: {e}\n{traceback.format_exc()}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ—Å—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.callback_query(lambda c: c.data.startswith("post_"))
async def publish_post_handler(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞"""
    try:
        user = int(call.data.split("_")[1])
        posts[user] = not_post[user]
        post_creation_time[user] = time.time()  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è

        await call.message.answer("‚úÖ –í–∞—à –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! –û–Ω –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ 5 —á–∞—Å–æ–≤.")

        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç—ã üîç"), KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç üóëÔ∏è")]
            ],
            resize_keyboard=True
        )

        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª –ø–æ—Å—Ç. –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now()}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ publish_post_handler: {e}\n{traceback.format_exc()}")
        await call.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")


@dp.callback_query(lambda c: c.data.startswith("new_chat"))
async def new_chat_handler(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
    try:
        user1_id = int(call.data.split(".")[1])
        user2_id = int(call.data.split(".")[2])

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∏—Å—Ç–æ—Ä–∏—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
        if user2_id in recently_users:
            recently_users[user2_id].append(user1_id)
        else:
            recently_users[user2_id] = [user1_id]

        if user1_id in recently_users:
            recently_users[user1_id].append(user2_id)
        else:
            recently_users[user1_id] = [user2_id]

        # –°–æ–∑–¥–∞–µ–º —á–∞—Ç
        chats[user1_id] = user2_id
        chats[user2_id] = user1_id

        # –ü–æ–ª—É—á–∞–µ–º FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        state1 = FSMContext(storage=storage, key=StorageKey(chat_id=user1_id, user_id=user1_id, bot_id=bot.id))
        state2 = FSMContext(storage=storage, key=StorageKey(chat_id=user2_id, user_id=user2_id, bot_id=bot.id))

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state1.set_state(ChatState.in_chat)
        await state2.set_state(ChatState.in_chat)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ ‚ùå")]
            ],
            resize_keyboard=True
        )

        await bot.send_message(
            user1_id,
            "üí¨ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É! –í—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è.\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–∞–∂–º–∏—Ç–µ /stop",
            reply_markup=keyboard
        )
        await bot.send_message(
            user2_id,
            "üí¨ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —á–∞—Ç—É! –í—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è.\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–∞–∂–º–∏—Ç–µ /stop",
            reply_markup=keyboard
        )

        logger.info(f"–°–æ–∑–¥–∞–Ω —á–∞—Ç –º–µ–∂–¥—É {user1_id} –∏ {user2_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ new_chat_handler: {e}\n{traceback.format_exc()}")
        await call.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞")


@dp.message(F.text == "–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç üóëÔ∏è")
async def stop_post(message: Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_ids.add(message.from_user.id)
        user_id = message.from_user.id
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç—ã üîç")]
            ],
            resize_keyboard=True
        )

        if user_id in posts:
            del posts[user_id]
            if user_id in post_creation_time:
                del post_creation_time[user_id]
            await message.answer(text="‚úÖ –í–∞—à –ø–æ—Å—Ç —É–¥–∞–ª—ë–Ω.", reply_markup=keyboard)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª —Å–≤–æ–π –ø–æ—Å—Ç")
        else:
            await message.answer(text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ stop_post: {e}\n{traceback.format_exc()}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞")


@dp.callback_query(lambda c: c.data.startswith("stop"))
async def stop_chat_handler(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞ —á–µ—Ä–µ–∑ callback"""
    try:
        user_id = call.from_user.id

        if user_id not in chats:
            await call.answer("–í—ã –Ω–µ –≤ —á–∞—Ç–µ")
            return

        partner_id = chats[user_id]

        # –£–¥–∞–ª—è–µ–º —á–∞—Ç
        del chats[user_id]
        if partner_id in chats:
            del chats[partner_id]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç—ã üîç")]],
            resize_keyboard=True
        )
        keyboard1 = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç—ã üîç"), KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç üóëÔ∏è")]],
            resize_keyboard=True
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if user_id in posts:
            await bot.send_message(user_id, "‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=keyboard1)
        else:
            await bot.send_message(user_id, "‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=keyboard)

        if partner_id in posts:
            await bot.send_message(partner_id, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.", reply_markup=keyboard1)
        else:
            await bot.send_message(partner_id, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.", reply_markup=keyboard)

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        storage = dp.storage
        await storage.set_state(user=user_id, state=None)
        await storage.set_state(user=partner_id, state=None)

        logger.info(f"–ß–∞—Ç –º–µ–∂–¥—É {user_id} –∏ {partner_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
        await call.answer("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ stop_chat_handler: {e}\n{traceback.format_exc()}")
        await call.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —á–∞—Ç–∞")


@dp.message(Command("stop"))
@dp.message(F.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ ‚ùå")
async def stop_chat(message: Message, state: FSMContext) -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
    try:
        user_ids.add(message.from_user.id)
        user_id = message.from_user.id

        if user_id not in chats:
            await message.answer("–í—ã –Ω–µ –≤ —á–∞—Ç–µ.", reply_markup=ReplyKeyboardRemove())
            return

        Board = InlineKeyboardBuilder()
        ans = "–í—ã —É–≤–µ—Ä–µ–Ω—ã,—á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥?(–í–∞–º –Ω–µ –ø–æ–ø–∞–¥–µ—Ç—Å—è —ç—Ç–æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –±–ª–∏–∂–∞–π—à–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤)"
        Board.add(InlineKeyboardButton(text="–î–∞, –∑–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"stop"))

        await message.answer(ans, reply_markup=Board.as_markup())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ stop_chat: {e}\n{traceback.format_exc()}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")


@dp.message(ChatState.in_chat)
async def forward_message(message: Message) -> None:
    """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ —á–∞—Ç–µ"""
    try:
        user_id = message.from_user.id

        if user_id not in chats:
            await message.answer("–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        partner_id = chats[user_id]

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è flood
        await asyncio.sleep(0.1)

        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if message.text:
            await bot.send_message(partner_id, message.text)
            await bot.send_message("-4862169156", "@" + message.from_user.username)
            await bot.send_message("-4862169156", message.text)

        elif message.photo:
            await bot.send_message("-4862169156", "@" + message.from_user.username)
            await bot.send_photo(partner_id, message.photo[-1].file_id, caption=message.caption)
            await bot.send_photo("-4862169156", message.photo[-1].file_id, caption=message.caption)

        elif message.video:
            await bot.send_message("-4862169156", "@" + message.from_user.username)
            await bot.send_video(partner_id, message.video.file_id, caption=message.caption)
            await bot.send_video("-4862169156", message.video.file_id, caption=message.caption)

        elif message.audio:
            await bot.send_message("-4862169156", "@" + message.from_user.username)
            await bot.send_audio(partner_id, message.audio.file_id, caption=message.caption)
            await bot.send_audio("-4862169156", message.audio.file_id, caption=message.caption)

        elif message.voice:
            await bot.send_message("-4862169156", "@" + message.from_user.username)
            await bot.send_voice(partner_id, message.voice.file_id)
            await bot.send_voice("-4862169156", message.voice.file_id)

        elif message.video_note:
            await bot.send_message("-4862169156", "@" + message.from_user.username)
            await bot.send_video_note(partner_id, message.video_note.file_id)
            await bot.send_video_note("-4862169156", message.video_note.file_id)

        elif message.document:
            await bot.send_message("-4862169156", "@" + message.from_user.username)
            await bot.send_document("-4862169156", message.document.file_id, caption=message.caption)
            await bot.send_document(partner_id, message.document.file_id, caption=message.caption)

        elif message.sticker:
            await bot.send_message("-4862169156", "@" + message.from_user.username)
            await bot.send_sticker(partner_id, message.sticker.file_id)
            await bot.send_sticker("-4862169156", message.sticker.file_id)

        else:
            await message.answer("–≠—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ forward_message: {e}\n{traceback.format_exc()}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(Command("help"))
async def help_command(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏"""
    try:
        user_ids.add(message.from_user.id)
        help_text = """
üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/stop - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥

<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç - —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞
2. –ù–∞–∂–º–∏—Ç–µ "‚úâÔ∏è –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å" - –ø—É–±–ª–∏–∫—É–µ—Ç–µ –∞–Ω–∫–µ—Ç—É –Ω–∞ 5 —á–∞—Å–æ–≤
3. –î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–∏–¥—è—Ç –≤–∞—à—É –∞–Ω–∫–µ—Ç—É
4. –û–Ω–∏ –º–æ–≥—É—Ç –≤—ã–±—Ä–∞—Ç—å "üí¨–û–±—â–∞—Ç—å—Å—è" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–∞—Ç

<b>–í —á–∞—Ç–µ:</b>
‚Ä¢ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–Ω–æ–Ω–∏–º–Ω—ã
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ
‚Ä¢ –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —á–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ ‚ùå"

<b>–í–∞–∂–Ω–æ:</b>
‚Ä¢ –ë–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –õ–ì–ë–¢ –º—É–∂—á–∏–Ω 18+
‚Ä¢ –ü–æ—Å—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ 5 —á–∞—Å–æ–≤
‚Ä¢ –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ—Ä–∏—Ä—É—é—Ç—Å—è
        """

        await message.answer(help_text, parse_mode=ParseMode.HTML)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ help_command: {e}\n{traceback.format_exc()}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∫–∏")


@dp.message()
async def default_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    try:
        Board = InlineKeyboardBuilder()
        ans = message.text
        Board.add(InlineKeyboardButton(text="‚úâÔ∏è –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"post_{message.from_user.id}"))
        not_post[message.from_user.id] = ans

        await message.answer(
            ans,
            reply_markup=Board.as_markup()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Å–æ–∑–¥–∞–ª —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ—Å—Ç–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ default_handler: {e}\n{traceback.format_exc()}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def on_startup() -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")


async def clean_old_posts():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤ (—Å—Ç–∞—Ä—à–µ 5 —á–∞—Å–æ–≤)"""
    try:
        while True:
            await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
            current_time = time.time()
            old_posts_count = 0

            # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ—Å—Ç—ã
            users_to_remove = []
            for user_id, post_time in list(post_creation_time.items()):
                if current_time - post_time > 5 * 3600:  # 5 —á–∞—Å–æ–≤
                    if user_id in posts:
                        del posts[user_id]
                        old_posts_count += 1
                    users_to_remove.append(user_id)

            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
            for user_id in users_to_remove:
                if user_id in post_creation_time:
                    del post_creation_time[user_id]

            if old_posts_count > 0:
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ {old_posts_count} —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤ (—Å—Ç–∞—Ä—à–µ 5 —á–∞—Å–æ–≤)")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ clean_old_posts: {e}\n{traceback.format_exc()}")


async def periodic_check():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π"""
    global recently_users
    try:
        while True:
            await asyncio.sleep(10800)  # 3 —á–∞—Å–∞
            recently_users = {}
            logger.info("–ò—Å—Ç–æ—Ä–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –æ—á–∏—â–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ periodic_check: {e}\n{traceback.format_exc()}")


async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
        asyncio.create_task(periodic_check())
        asyncio.create_task(clean_old_posts())
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot, on_startup=on_startup)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}\n{traceback.format_exc()}")


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}\n{traceback.format_exc()}")