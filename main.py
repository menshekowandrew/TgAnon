# main.py
import logging
from typing import Dict
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.base import StorageKey
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import (
    InlineKeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    CallbackQuery
)
import random
import asyncio
import os
import traceback
import time
from datetime import datetime, timedelta
from storage_mysql import MySQLStorage
from database import Database

# ========== Config ==========
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_KEY = os.getenv('ADMIN_KEY', 'secret123')
ADMIN_LOG_CHAT = os.getenv('ADMIN_LOG_CHAT', None)  # –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤ .env, –Ω–∞–ø—Ä–∏–º–µ—Ä -4862169156

# Logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

if not BOT_TOKEN:
    logger.error("BOT_TOKEN not set")
    exit(1)

# Initialize bot, dp, db
bot = Bot(token=BOT_TOKEN)
storage = MySQLStorage()
dp = Dispatcher(storage=storage)
db = Database()

# States
class ChatState(StatesGroup):
    waiting_for_partner = State()
    in_chat = State()
    waiting_for_broadcast = State()

not_post: Dict[int, str] = {}           # drafts in memory
recently_users: Dict[int, list] = {}    # recent interactions (ephemeral)
user_post_view_time: Dict[int, Dict[int, float]] = {}  # view timestamps (ephemeral)


# ========== Helpers ==========
def can_show_post(viewer_id: int, post_owner_id: int) -> bool:
    try:
        current_time = time.time()
        if viewer_id not in user_post_view_time:
            return True
        if post_owner_id not in user_post_view_time[viewer_id]:
            return True
        return (current_time - user_post_view_time[viewer_id][post_owner_id]) >= 600
    except Exception as e:
        logger.error(f"can_show_post error: {e}")
        return True

def record_post_view(viewer_id: int, post_owner_id: int):
    try:
        if viewer_id not in user_post_view_time:
            user_post_view_time[viewer_id] = {}
        user_post_view_time[viewer_id][post_owner_id] = time.time()
    except Exception as e:
        logger.error(f"record_post_view error: {e}")

async def safe_send(user_id: int, text: str, **kwargs):
    try:
        return await bot.send_message(user_id, text, **kwargs)
    except Exception as e:
        logger.warning(f"Failed to send to {user_id}: {e}")
        return None

# ========== Handlers ==========
@dp.message(Command("broadcast"))
async def broadcast_command(message: Message, state: FSMContext):
    try:
        if len(message.text.split()) < 2 or message.text.split()[1] != ADMIN_KEY:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞")
            return
        await message.answer("üì¢ –†–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel")
        await state.set_state(ChatState.waiting_for_broadcast)
        logger.info(f"User {message.from_user.id} activated broadcast mode")
    except Exception as e:
        logger.error(f"broadcast_command error: {e}\n{traceback.format_exc()}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")

@dp.message(Command("cancel"), ChatState.waiting_for_broadcast)
async def cancel_broadcast(message: Message, state: FSMContext):
    try:
        await state.set_state(ChatState.in_chat)
        await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    except Exception as e:
        logger.error(f"cancel_broadcast error: {e}\n{traceback.format_exc()}")

@dp.message(ChatState.waiting_for_broadcast)
async def process_broadcast_message(message: Message, state: FSMContext):
    try:
        broadcast_text = message.text or ""
        await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
        all_users = db.get_all_users()
        success_count = 0
        fail_count = 0
        total_users = len(all_users)
        for user_id in all_users:
            try:
                await bot.send_message(user_id, broadcast_text, parse_mode=ParseMode.HTML)
                success_count += 1
                await asyncio.sleep(0.05)
            except Exception as e:
                fail_count += 1
                logger.warning(f"Broadcast failed to {user_id}: {e}")

        report_text = (
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {fail_count}\n"
            f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: { (success_count / total_users * 100) if total_users>0 else 0 :.1f}%"
        )
        await message.answer(report_text)
        await state.set_state(ChatState.in_chat)
        logger.info(f"Broadcast done: success={success_count} fail={fail_count}")
    except Exception as e:
        logger.error(f"process_broadcast_message error: {e}\n{traceback.format_exc()}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ")
        await state.set_state(ChatState.in_chat)

@dp.message(Command("stats"))
async def stats_command(message: Message, state: FSMContext):
    try:
        if len(message.text.split()) < 2 or message.text.split()[1] != ADMIN_KEY:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞")
            return
        users_count = len(db.get_all_users())
        active_chats = db.count_active_chats()
        posts_count = len(db.get_posts_raw())
        posts_today = db.count_posts_since(24*3600)
        search_count = len([k for k in recently_users.keys()])
        stats_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
            f"üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {active_chats}\n"
            f"üìù –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {posts_count}\n"
            f"‚è∞ –ü–æ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {posts_today}\n"
            f"üîç –í –ø–æ–∏—Å–∫–µ: {search_count}"
        )
        await message.answer(stats_text, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"stats_command error: {e}\n{traceback.format_exc()}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@dp.message(CommandStart())
async def command_start(message: Message, state: FSMContext) -> None:
    try:
        db.add_user(message.from_user.id, message.from_user.username or "", message.from_user.full_name or "")
        welcome_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å—Ä–µ–¥–∏ –≥–µ–µ–≤.\n\n"
            "üîç –ù–∞–∂–º–∏ \"–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç—ã\", —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.\n"
            "üìÑ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ–≥–æ —Ç–µ–∫—Å—Ç –±–æ—Ç—É.\n\n"
            "‚ö†Ô∏è –ü—Ä–∞–≤–∏–ª–∞:\n"
            "1. –ó–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è —Ç—Ä–∞–≤–ª—è –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è\n"
            "2. –ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –¥–ª—è –õ–ì–ë–¢ –º—É–∂—á–∏–Ω\n"
            "3. –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
            "4. –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –≤–∞–º 18+\n\n"
            "üö™ –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop –∏–ª–∏ –∫–Ω–æ–ø–∫—É"
        )
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç—ã üîç")]],
            resize_keyboard=True
        )
        await message.answer(welcome_text, reply_markup=keyboard)
        logger.info(f"User {message.from_user.id} started bot")
    except Exception as e:
        logger.error(f"command_start error: {e}\n{traceback.format_exc()}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç—ã üîç")
async def start_search(message: Message, state: FSMContext) -> None:
    try:
        db.add_user(message.from_user.id, message.from_user.username or "", message.from_user.full_name or "")
        user_id = message.from_user.id
        posts = db.get_active_posts(max_age_seconds=5*3600)

        available_posts = []
        for p in posts:
            uid = p["user_id"]
            text = p["text"]
            if uid == user_id:
                continue
            if db.get_active_chat_partner(uid):
                continue
            if uid in recently_users.get(user_id, []):
                continue
            if not can_show_post(user_id, uid):
                continue
            available_posts.append((uid, text))

        if not available_posts:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–ª—è –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            return

        show = random.choice(available_posts)
        post_owner_id = show[0]

        record_post_view(user_id, post_owner_id)

        Board = InlineKeyboardBuilder()
        Board.add(InlineKeyboardButton(text="üí¨–û–±—â–∞—Ç—å—Å—è", callback_data=f"new_chat.{post_owner_id}.{user_id}"))
        Board.add(InlineKeyboardButton(text="‚ö†Ô∏è–ñ–∞–ª–æ–±–∞", callback_data=f"warning.{post_owner_id}"))

        await message.answer(text=show[1], reply_markup=Board.as_markup())
        logger.info(f"User {user_id} views post {post_owner_id}")
    except Exception as e:
        logger.error(f"start_search error: {e}\n{traceback.format_exc()}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ—Å—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(lambda c: c.data.startswith("post_"))
async def publish_post_handler(call: CallbackQuery, state: FSMContext):
    try:
        user = int(call.data.split("_")[1])
        text = not_post.get(user)
        if not text:
            await call.answer("–ù–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            return
        db.add_post(user, text)
        # —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await call.message.answer("‚úÖ –í–∞—à –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! –û–Ω –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ 5 —á–∞—Å–æ–≤.")
        # —É–¥–∞–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
        if user in not_post:
            del not_post[user]
        try:
            await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        except:
            pass
        logger.info(f"User {user} published a post")
    except Exception as e:
        logger.error(f"publish_post_handler error: {e}\n{traceback.format_exc()}")
        await call.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")

@dp.callback_query(lambda c: c.data.startswith("new_chat"))
async def new_chat_handler(call: CallbackQuery, state: FSMContext):
    try:
        # callback format: new_chat.<user1>.<user2>
        parts = call.data.split(".")
        if len(parts) < 3:
            await call.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return
        user1_id = int(parts[1])
        user2_id = int(parts[2])

        # add users to DB (ensure present)
        db.add_user(user1_id, "", "")
        db.add_user(user2_id, "", "")

        # update recent interactions
        recently_users.setdefault(user1_id, []).append(user2_id)
        recently_users.setdefault(user2_id, []).append(user1_id)

        # create in-memory chat pairing
        db.create_chat(user1_id, user2_id)

        # set FSM states for both (create contexts)
        state1 = FSMContext(storage=storage, key=StorageKey(chat_id=user1_id, user_id=user1_id, bot_id=bot.id))
        state2 = FSMContext(storage=storage, key=StorageKey(chat_id=user2_id, user_id=user2_id, bot_id=bot.id))
        await state1.set_state(ChatState.in_chat)
        await state2.set_state(ChatState.in_chat)

        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ ‚ùå")]],
            resize_keyboard=True
        )

        await safe_send(user1_id, "üí¨ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É! –í—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è.\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–∞–∂–º–∏—Ç–µ /stop", reply_markup=keyboard)
        await safe_send(user2_id, "üí¨ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —á–∞—Ç—É! –í—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è.\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–∞–∂–º–∏—Ç–µ /stop", reply_markup=keyboard)

        logger.info(f"Chat created between {user1_id} and {user2_id}")
        await call.answer()
    except Exception as e:
        logger.error(f"new_chat_handler error: {e}\n{traceback.format_exc()}")
        await call.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞")

@dp.message(F.text == "–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç üóëÔ∏è")
async def stop_post(message: Message):
    try:
        db.add_user(message.from_user.id, message.from_user.username or "", message.from_user.full_name or "")
        deleted = db.delete_post(message.from_user.id)
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç—ã üîç")]],
            resize_keyboard=True
        )
        if deleted:
            await message.answer(text="‚úÖ –í–∞—à –ø–æ—Å—Ç —É–¥–∞–ª—ë–Ω.", reply_markup=keyboard)
        else:
            await message.answer(text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"stop_post error: {e}\n{traceback.format_exc()}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞")

@dp.callback_query(lambda c: c.data.startswith("stop"))
async def stop_chat_handler(call: CallbackQuery, state: FSMContext):
    try:
        user_id = call.from_user.id
        partner_id = db.get_active_chat_partner(user_id)

        if not partner_id:
            await call.answer("–í—ã –Ω–µ –≤ —á–∞—Ç–µ")
            await state.clear()
            return

        # remove chat pairs
        db.end_chat(user_id)

        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç—ã üîç")]],
            resize_keyboard=True
        )
        keyboard1 = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç—ã üîç"), KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç üóëÔ∏è")]],
            resize_keyboard=True
        )

        # notify both
        if db.get_post(user_id):
            await safe_send(user_id, "‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=keyboard1)
        else:
            await safe_send(user_id, "‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=keyboard)

        if db.get_post(partner_id):
            await safe_send(partner_id, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.", reply_markup=keyboard1)
        else:
            await safe_send(partner_id, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.", reply_markup=keyboard)

        # clear FSM states
        storage = dp.storage
        await state.clear()
        partner_state = FSMContext(
            storage=dp.storage,
            key=StorageKey(chat_id=partner_id, user_id=partner_id, bot_id=bot.id)
        )
        await partner_state.clear()
        logger.info(f"Chat between {user_id} and {partner_id} ended")
        await call.answer("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
    except Exception as e:
        logger.error(f"stop_chat_handler error: {e}\n{traceback.format_exc()}")
        await call.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —á–∞—Ç–∞")

@dp.message(Command("stop"))
@dp.message(F.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ ‚ùå")
async def stop_chat(message: Message, state: FSMContext) -> None:
    try:
        user_id = message.from_user.id
        partner_id = db.get_active_chat_partner(user_id)

        if not partner_id:
            await message.answer("–í—ã –Ω–µ –≤ —á–∞—Ç–µ.", reply_markup=ReplyKeyboardRemove())
            await state.clear()
            return
        Board = InlineKeyboardBuilder()
        Board.add(InlineKeyboardButton(text="–î–∞, –∑–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"stop"))
        ans = "–í—ã —É–≤–µ—Ä–µ–Ω—ã,—á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥?(–í–∞–º –Ω–µ –ø–æ–ø–∞–¥–µ—Ç—Å—è —ç—Ç–æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –±–ª–∏–∂–∞–π—à–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤)"
        await message.answer(ans, reply_markup=Board.as_markup())
    except Exception as e:
        logger.error(f"stop_chat error: {e}\n{traceback.format_exc()}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")

@dp.message(ChatState.in_chat)
async def forward_message(message: Message, state: FSMContext) -> None:
    try:
        try:
            user_id = message.from_user.id
            partner_id = db.get_active_chat_partner(user_id)

            if not partner_id:
                await message.answer("–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await state.clear()
                return

            await asyncio.sleep(0.1)  # –∑–∞—â–∏—Ç–∞ –æ—Ç flood

            if not db.get_active_chat_partner(user_id):
                await message.answer("–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await state.clear()
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è flood
            await asyncio.sleep(0.1)

            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if message.text:
                await bot.send_message(partner_id, message.text)
                await bot.send_message("-4862169156", "@" + message.from_user.username +" " + message.text)

            elif message.photo:
                await bot.send_photo(partner_id, message.photo[-1].file_id, caption=message.caption)
                await bot.send_photo("-4862169156", message.photo[-1].file_id, caption="@" + message.from_user.username + " " + message.caption)

            elif message.video:
                await bot.send_video(partner_id, message.video.file_id, caption=message.caption)
                await bot.send_video("-4862169156", message.video.file_id, caption="@" + message.from_user.username + " " + message.caption)

            elif message.audio:
                await bot.send_audio(partner_id, message.audio.file_id, caption=message.caption)
                await bot.send_audio("-4862169156", message.audio.file_id, caption="@" + message.from_user.username + " " +message.caption)

            elif message.voice:
                await bot.send_message("-4862169156", "@" + message.from_user.username)
                await bot.send_voice(partner_id, message.voice.file_id)
                await bot.send_voice("-4862169156", message.voice.file_id)

            elif message.video_note:
                await bot.send_message("-4862169156", "@" + message.from_user.username)
                await bot.send_video_note(partner_id, message.video_note.file_id)
                await bot.send_video_note("-4862169156", message.video_note.file_id)

            elif message.document:
                await bot.send_document("-4862169156", message.document.file_id, caption=message.caption)
                await bot.send_document(partner_id, message.document.file_id, caption=message.caption)

            elif message.sticker:
                await bot.send_message("-4862169156", "@" + message.from_user.username)
                await bot.send_sticker(partner_id, message.sticker.file_id)
                await bot.send_sticker("-4862169156", message.sticker.file_id)

            else:
                await message.answer("–≠—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ forward_message: {e}\n{traceback.format_exc()}")

        else:
            pass
    except Exception as e:
        logger.error(f"forward_message error: {e}\n{traceback.format_exc()}")

@dp.message(Command("help"))
async def help_command(message: Message) -> None:
    try:
        db.add_user(message.from_user.id, message.from_user.username or "", message.from_user.full_name or "")
        help_text = """
üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/stop - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥

<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç - —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞
2. –ù–∞–∂–º–∏—Ç–µ "‚úâÔ∏è –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å" - –ø—É–±–ª–∏–∫—É–µ—Ç–µ –∞–Ω–∫–µ—Ç—É –Ω–∞ 5 —á–∞—Å–æ–≤
3. –î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–∏–¥—è—Ç –≤–∞—à—É –∞–Ω–∫–µ—Ç—É
4. –û–Ω–∏ –º–æ–≥—É—Ç –≤—ã–±—Ä–∞—Ç—å "üí¨–û–±—â–∞—Ç—å—Å—è" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–∞—Ç
        """
        await message.answer(help_text, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"help_command error: {e}\n{traceback.format_exc()}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∫–∏")

@dp.message()
async def default_handler(message: Message) -> None:
    try:
        ans = message.text or ""
        Board = InlineKeyboardBuilder()
        Board.add(InlineKeyboardButton(text="‚úâÔ∏è –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"post_{message.from_user.id}"))
        not_post[message.from_user.id] = ans
        await message.answer(ans, reply_markup=Board.as_markup())
        logger.info(f"User {message.from_user.id} created draft")
    except Exception as e:
        logger.error(f"default_handler error: {e}\n{traceback.format_exc()}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ========== Background tasks ==========
async def clean_old_user_views():
    try:
        while True:
            await asyncio.sleep(3600)
            current_time = time.time()
            removed = 0
            for viewer in list(user_post_view_time.keys()):
                for owner in list(user_post_view_time[viewer].keys()):
                    if current_time - user_post_view_time[viewer][owner] > 86400:
                        del user_post_view_time[viewer][owner]
                        removed += 1
                if not user_post_view_time.get(viewer):
                    user_post_view_time.pop(viewer, None)
            if removed:
                logger.info(f"Cleared {removed} old post view records")
    except Exception as e:
        logger.error(f"clean_old_user_views error: {e}\n{traceback.format_exc()}")

async def clean_old_posts():
    try:
        while True:
            await asyncio.sleep(3600)
            deleted = db.delete_old_posts(older_than_seconds=5*3600)
            if deleted:
                logger.info(f"Deleted {deleted} old posts older than 5 hours")
    except Exception as e:
        logger.error(f"clean_old_posts error: {e}\n{traceback.format_exc()}")

async def periodic_check():
    global recently_users
    try:
        while True:
            await asyncio.sleep(10800)
            recently_users = {}
            logger.info("Cleared recently_users history")
    except Exception as e:
        logger.error(f"periodic_check error: {e}\n{traceback.format_exc()}")

async def backup_user_ids():
    try:
        while True:
            await asyncio.sleep(3600)
            # –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å snapshot
            logger.debug(f"User count: {len(db.get_all_users())}")
    except Exception as e:
        logger.error(f"backup_user_ids error: {e}\n{traceback.format_exc()}")

# ========== Main ==========
async def on_startup():
    logger.info("Bot started (on_startup)")

async def main() -> None:
    try:
        await storage.connect()
        logger.info("Starting bot...")
        asyncio.create_task(periodic_check())
        asyncio.create_task(clean_old_posts())
        asyncio.create_task(clean_old_user_views())
        asyncio.create_task(backup_user_ids())
        await dp.start_polling(bot, on_startup=on_startup)
    except Exception as e:
        logger.error(f"Critical error in main: {e}\n{traceback.format_exc()}")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Fatal error: {e}\n{traceback.format_exc()}")
