import logging
from typing import Dict
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.base import StorageKey
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardMarkup
from aiogram.types import (
    InlineKeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    CallbackQuery
)
import random
import asyncio
import html
import os
BOT_TOKEN = os.getenv('BOT_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = BOT_TOKEN

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ChatState(StatesGroup):
    waiting_for_partner = State()
    in_chat = State()


# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
active_users: Dict[int, Dict] = {}  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –æ–∂–∏–¥–∞—é—â–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
chats: Dict[int, int] = {}# –¢–µ–∫—É—â–∏–µ —á–∞—Ç—ã: {user1_id: user2_id, user2_id: user1_id}
posts: Dict[int, str] = {}
not_post: Dict[int, str] = {}


@dp.message(CommandStart(),ChatState.in_chat)
async def statr_com(message: Message):
    await message.answer(text="–ú–µ–Ω—é –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –¥–∏–∞–ª–æ–≥–µ")

@dp.message(CommandStart())
async def command_start(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = f"""
    üëã –ü—Ä–∏–≤–µ—Ç,! –≠—Ç–æ –±–æ—Ç –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å—Ä–µ–¥–∏ –≥–µ–µ–≤.

    üîç –ù–∞–∂–º–∏ "–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç—ã", —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.
    üìÑ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ–≥–æ —Ç–µ–∫—Å—Ç –±–æ—Ç—É.
       (–£ –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã–π –ø–æ—Å—Ç)

    ‚ö†Ô∏è –ü—Ä–∞–≤–∏–ª–∞:
    1. –ó–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è –ª—é–±–∞—è —Ç—Ä–∞–≤–ª—è –∏ –≤—ã—Å–∫–∞–∑—ã–≤–∞–µ–∏–Ω—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—ã –∏/–∏–ª–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
    2. –ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –¥–ª—è –õ–ì–ë–¢ –º—É–∂—á–∏–Ω
    3. –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
    4. –ü—Ä–æ–¥–æ–ª–∂–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –≤—ã —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç.   

    üö™ –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop –∏–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É
    """
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç—ã üîç")]
        ],
        resize_keyboard=True
    )

    await message.answer(welcome_text, reply_markup=keyboard)


@dp.message(F.text == "–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç—ã üîç")
async def start_search(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    Board = InlineKeyboardBuilder()
    available_posts = [[uid,posts[uid]] for uid in posts.keys() if (uid!=message.from_user.id and uid not in chats.keys())]
    if len(available_posts)<1:
        await message.answer(text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–ª—è –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        return
    show = random.choice(available_posts)
    Board.add(InlineKeyboardButton(text="üí¨–û–±—â–∞—Ç—å—Å—è", callback_data=f"new_chat.{show[0]}.{message.from_user.id}"))
    Board.add(InlineKeyboardButton(text="‚ö†Ô∏è–ñ–∞–ª–æ–±–∞", callback_data=f"warning.{show[0]}"))
    await message.answer(text=show[1], reply_markup=Board.as_markup())
    print(show)



@dp.callback_query(lambda c: c.data.startswith("post_"))
async def default_handler(call: CallbackQuery):
    user = int(call.data.split("_")[1])
    posts[user] = not_post[user]
    await call.message.answer("–í–∞—à –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç—ã üîç"), KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç üóëÔ∏è")]
        ],
        resize_keyboard=True
    )
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)


@dp.callback_query(lambda c: c.data.startswith("new_chat"))
async def default_handler(call: CallbackQuery):
    user1_id = int(call.data.split(".")[1])
    user2_id = int(call.data.split(".")[2])
    chats[user1_id] = user2_id
    chats[user2_id] = user1_id

    # –ü–æ–ª—É—á–∞–µ–º FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    state1 = FSMContext(storage=storage, key=StorageKey(chat_id=user1_id, user_id=user1_id, bot_id=bot.id))
    state2 = FSMContext(storage=storage, key=StorageKey(chat_id=user2_id, user_id=user2_id, bot_id=bot.id))

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state1.set_state(ChatState.in_chat)
    await state2.set_state(ChatState.in_chat)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ ‚ùå")]
        ],
        resize_keyboard=True
    )

    await bot.send_message(
        user1_id,
        "üí¨ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É! –í—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è.\n –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–∞–∂–º–∏—Ç–µ /stop",
        reply_markup=keyboard
    )
    await bot.send_message(
        user2_id,
        "üí¨ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —á–∞—Ç—É! –í—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è.\n –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–∞–∂–º–∏—Ç–µ /stop",
        reply_markup=keyboard
    )


@dp.message(F.text == "–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç üóëÔ∏è")
async def stop_post(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç—ã üîç")

             ]
        ],
        resize_keyboard=True
    )
    if message.from_user.id in posts.keys():
        del posts[message.from_user.id]
        await message.answer(text="–í–∞—à –ø–æ—Å—Ç —É–¥–∞–ª—ë–Ω.",reply_markup=keyboard)
    else:
        await message.answer(text="–£ –≤–∞—Å –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=keyboard)



@dp.message(Command("stop"))
@dp.message(F.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ ‚ùå")
async def stop_chat(message: Message, state: FSMContext) -> None:
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥"""
    user_id = message.from_user.id

    if user_id not in chats:
        await message.answer("–í—ã –Ω–µ –≤ —á–∞—Ç–µ.", reply_markup=ReplyKeyboardRemove())
        return

    partner_id = chats[user_id]

    # –£–¥–∞–ª—è–µ–º —á–∞—Ç
    del chats[user_id]
    if partner_id in chats:
        del chats[partner_id]
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç—ã üîç"), KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç üóëÔ∏è")]
        ],
        resize_keyboard=True
    )
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç—ã üîç")]
        ],
        resize_keyboard=True
    )
    keyboard1 = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç—ã üîç"), KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç üóëÔ∏è")]
        ],
        resize_keyboard=True
    )
    if user_id in posts.keys():
        await bot.send_message(user_id, "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=keyboard1)
    else:
        await bot.send_message(user_id, "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=keyboard)
    if partner_id in posts.keys():
        await bot.send_message(
            partner_id,
            "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.",
            reply_markup=keyboard1
        )
    else:
        await bot.send_message(
            partner_id,
            "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.",
            reply_markup=keyboard
        )


    await state.clear()


@dp.message(ChatState.in_chat)
async def forward_message(message: Message) -> None:
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É"""
    user_id = message.from_user.id

    if user_id not in chats:
        await message.answer("–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    partner_id = chats[user_id]

    try:
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if message.text:
            await bot.send_message(partner_id, message.text)
            await bot.send_message("-4862169156", "@"+message.from_user.username)
            await bot.send_message("-4862169156", message.text)
        elif message.photo:
            await bot.send_message("-4862169156", "@"+message.from_user.username)
            await bot.send_photo(
                partner_id,
                message.photo[-1].file_id,
                caption=message.caption
            )
            await bot.send_photo(
                "-4862169156",
                message.photo[-1].file_id,
                caption=message.caption
            )
        elif message.video:
            await bot.send_message("-4862169156", "@"+message.from_user.username)
            await bot.send_video(
                partner_id,
                message.video.file_id,
                caption=message.caption
            )
            await bot.send_video(
                "-4862169156",
                message.video.file_id,
                caption=message.caption,
            )
        elif message.audio:
            await bot.send_message("-4862169156", "@"+message.from_user.username)
            await bot.send_audio(
                partner_id,
                message.audio.file_id,
                caption=message.caption
            )
            await bot.send_audio(
                "-4862169156",
                message.audio.file_id,
                caption=message.caption
            )
        elif message.voice:
            await bot.send_message("-4862169156", "@"+message.from_user.username)
            await bot.send_voice(partner_id, message.voice.file_id)
            await bot.send_voice("-4862169156", message.voice.file_id)
        elif message.video_note:
            await bot.send_message("-4862169156", "@"+message.from_user.username)
            await bot.send_video_note(partner_id, message.video_note.file_id)
            await bot.send_video_note("-4862169156", message.video_note.file_id)
        elif message.document:
            await bot.send_message("-4862169156", "@"+message.from_user.username)
            await bot.send_document(
                "-4862169156",
                message.document.file_id,
                caption=message.caption,
            )
            await bot.send_document(
                partner_id,
                message.document.file_id,
                caption=message.caption
            )
        elif message.sticker:
            await bot.send_message("-4862169156", "@"+message.from_user.username)
            await bot.send_sticker(partner_id, message.sticker.file_id)
            await bot.send_sticker("-4862169156", message.sticker.file_id)
        else:
            await message.answer(f"–≠—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


@dp.message()
async def default_handler(message: Message) -> None:
    Board = InlineKeyboardBuilder()
    ans = message.text
    Board.add(InlineKeyboardButton(text="‚úâÔ∏è",callback_data=f"post_{message.from_user.id}"))
    not_post[message.from_user.id] = ans
    await message.answer(
        ans,
        reply_markup=Board.as_markup()
    )


async def on_startup() -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    
    



async def main() -> None:

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot, on_startup=on_startup)


if __name__ == '__main__':
    asyncio.run(main())