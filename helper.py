import asyncio
import logging
import os
from typing import Dict, Optional
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, \
    InlineKeyboardButton
from aiogram.filters import CommandStart, Text, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN1')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID1')

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not ADMIN_CHAT_ID:
    raise ValueError("ADMIN_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
class Database:
    def __init__(self):
        self.user_messages = {}  # {message_id: user_id}
        self.admin_messages = {}  # {admin_message_id: original_message_id}

    def add_user_message(self, user_message_id: int, user_id: int):
        self.user_messages[user_message_id] = user_id

    def get_user_by_message(self, message_id: int) -> Optional[int]:
        return self.user_messages.get(message_id)

    def add_admin_message(self, admin_message_id: int, original_message_id: int):
        self.admin_messages[admin_message_id] = original_message_id

    def get_original_message(self, admin_message_id: int) -> Optional[int]:
        return self.admin_messages.get(admin_message_id)


db = Database()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì® –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏")],
            [KeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ")]
        ],
        resize_keyboard=True
    )


def get_cancel_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )


def get_reply_keyboard(message_id: int):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{message_id}")]
        ]
    )


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class FeedbackState(StatesGroup):
    waiting_for_message = State()


class ReplyState(StatesGroup):
    waiting_for_reply = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(CommandStart())
async def cmd_start(message: Message):
    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏!

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.

–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üì® –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    await message.answer(welcome_text, reply_markup=get_main_keyboard())


@dp.message(Text("üì® –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏"))
async def start_feedback(message: Message, state: FSMContext):
    await message.answer(
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(FeedbackState.waiting_for_message)


@dp.message(Text("‚ùå –û—Ç–º–µ–Ω–∞"))
async def cancel_feedback(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_main_keyboard()
    )


@dp.message(FeedbackState.waiting_for_message)
async def process_feedback(message: Message, state: FSMContext):
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–æ–≤
    admin_text = f"""
üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

üë§ User ID: {message.from_user.id}
üìõ –ò–º—è: {message.from_user.full_name}
@{message.from_user.username}

üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:
{message.text}
    """

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    admin_message = await bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=admin_text,
        reply_markup=get_reply_keyboard(message.message_id)
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.add_user_message(message.message_id, message.from_user.id)
    db.add_admin_message(admin_message.message_id, message.message_id)

    await message.answer(
        "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
        reply_markup=get_main_keyboard()
    )
    await state.clear()


@dp.message(Text("‚ÑπÔ∏è –û –±–æ—Ç–µ"))
async def about_bot(message: Message):
    about_text = """
ü§ñ –û –±–æ—Ç–µ

–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.
–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—ã!
    """
    await message.answer(about_text)


@dp.callback_query(Text(startswith="reply_"))
async def start_reply(callback: CallbackQuery, state: FSMContext):
    message_id = int(callback.data.split("_")[1])
    user_id = db.get_user_by_message(message_id)

    if not user_id:
        await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    await state.update_data(user_id=user_id, original_message_id=message_id)
    await callback.message.answer(
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(ReplyState.waiting_for_reply)
    await callback.answer()


@dp.message(ReplyState.waiting_for_reply)
async def send_reply(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data['user_id']
    original_message_id = data['original_message_id']

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        reply_text = f"""
üì© –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:

{message.text}

---
–î–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞–∂–º–∏—Ç–µ /start
        """

        await bot.send_message(
            chat_id=user_id,
            text=reply_text
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ
        admin_notification = f"""
‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}
üí¨ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {message.text[:50]}...
        """

        await message.answer(admin_notification)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª–∏
        try:
            original_admin_message = message.reply_to_message
            if original_admin_message:
                await bot.edit_message_text(
                    chat_id=ADMIN_CHAT_ID,
                    message_id=original_admin_message.message_id,
                    text=f"‚úÖ –û–¢–í–ï–ß–ï–ù–û: {original_admin_message.text}",
                    reply_markup=None
                )
        except:
            pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å - –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

    await state.clear()


@dp.message(F.text)
async def handle_text_message(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–ª —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã
    current_state = await state.get_state()
    if not current_state and message.text not in ["üì® –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏", "‚ÑπÔ∏è –û –±–æ—Ç–µ", "‚ùå –û—Ç–º–µ–Ω–∞"]:
        await message.answer(
            "–ù–∞–∂–º–∏—Ç–µ 'üì® –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏' —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏",
            reply_markup=get_main_keyboard()
        )


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É
@dp.message(Command("admin"))
async def admin_check(message: Message):
    if str(message.chat.id) == ADMIN_CHAT_ID:
        await message.answer("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ!")
    else:
        await message.answer("–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω-—á–∞—Ç–æ–º")


async def main():
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())